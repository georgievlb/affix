---
AWSTemplateFormatVersion: 2010-09-09
Description: ECS Cluster Template
Parameters:
  VpcStackName:
    Type: String
    Default: affix-vpc
  SecurityGroupStackName:
    Type: String
    Default: affix-security-groups
  LoadBalancerStackName:
    Type: String
    Default: affix-load-balancer
  MinInstances:
    Description: Minimum number of instances in AutoScaling Group
    Type: String
    Default: 1
  MaxInstances:
    Description: Maximum number of instances in AutoScaling Group
    Type: String
    Default: 1
  ECSAMI:
    Description: ECS-Optimized AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-cluster
  
  ECSAutoScalingGroup:
    DependsOn: ECSCluster
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: !Ref MinInstances
      MaxSize: !Ref MaxInstances
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref ECSLaunchConfiguration
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${VpcStackName}-PublicSubnetAZ1
        - Fn::ImportValue: !Sub ${VpcStackName}-PublicSubnetAZ2
      HealthCheckType: ELB
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    # TODO: Add an UpdatePolicy. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-updatepolicy.html

  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      # TODO: Remove hardcoded AMI ID. See https://docs.aws.amazon.com/AmazonECS/latest/developerguide/retrieve-ecs-optimized_AMI.html
      ImageId: ami-00eb0dc604a8124fd
      InstanceType: t2.micro
      SecurityGroups:
        - Fn::ImportValue: !Sub ${SecurityGroupStackName}-ECSHostSecurityGroup
      IamInstanceProfile: !Ref ECSInstanceProfile
      KeyName: affix-instance
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          echo "ECS_CLUSTER=${AWS::StackName}-cluster" >> /etc/ecs/ecs.config
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          yum install -y aws-cfn-bootstrap hibagent
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
          yum install -y aws-cli
          echo Successfully registered container instance 
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

  ECSRole:
    Description: This IAM Role is attached to all of the ECS hosts.
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecs:ListTasks
                  - ecs:UpdateContainerInstancesState
                  - ecs:DescribeContainerInstances
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:Submit*
                  - elasticloadbalancing:DescribeTargetGroups
                Resource: "*"

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

  ECSServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action:
            - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
              - application-autoscaling.amazonaws.com
      Path: /
      Policies:
        - PolicyName: ecs-service-autoscaling
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - application-autoscaling:*
                - cloudwatch:DescribeAlarms
                - cloudwatch:PutMetricAlarm
                - ecs:DescribeServices
                - ecs:UpdateService
              Resource: "*"

Outputs:
  ECSCluster:
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AWS::StackName}-ECSCluster

  ECSServiceAutoScalingRole:
    Description: A reference to ECS service auto scaling role
    Value: !GetAtt ECSServiceAutoScalingRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ECSServiceAutoScalingRole

  ECSAutoScalingGroup:
    Description: A reference to ECS AutoScaling Group Name
    Value: !Ref ECSAutoScalingGroup
    Export:
      Name: !Sub ${AWS::StackName}-ECSAutoScalingGroup
  