---
AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Cluster
Parameters:
  MinInstances:
    Description: Minimum number of instances in AutoScaling Group
    Type: String
    Default: 1
  MaxInstances:
    Description: Maximum number of instances in AutoScaling Group
    Type: String
    Default: 1

Resources:
  # VPC to host the ECS cluster
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.192.0.0/16

  # Internet gateway to enable internet connectivity
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach the Internet gateway to the VPC
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1a
      VpcId: !Ref VPC
      CidrBlock: 10.192.10.0/24

  PublicSubnetAZ2:
   Type: AWS::EC2::Subnet
   Properties:
     AvailabilityZone: us-east-1b
     CidrBlock: 10.192.11.0/24
     VpcId: !Ref VPC

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: alb-registration-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:Describe*
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:DeregisterTargets
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeTargetHealth
                  - elasticloadbalancing:RegisterTargets
                Resource: '*'
  
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: affix-api
          Essential: true
          Image: lbgeorgiev/affix_api:latest
          Memory: 2048
          PortMappings:
            - ContainerPort: 5005
          Environment:
            - Name: ASPNETCORE_ENVIRONMENT
              Value: Local

  Service:
    Type: AWS::ECS::Service
    DependsOn: ALBListenerRule
    Properties:
      Cluster: !Ref ECSCluster
      Role: !Ref ServiceRole
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: affix-api
          ContainerPort: 5005
          TargetGroupArn: !Ref TargetGroup
      
  # Security group to control inbound and outbound traffic to the ECS cluster
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS cluster
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # SSH to the ECS host
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        # Any TCP traffic from the ALB
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
  # Application Load Balancer to distribute traffic to the ECS cluster
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnetAZ1
        - !Ref PublicSubnetAZ2
      SecurityGroups: # TODO: Add more security groups if necessary
        - !Ref SecurityGroup
        - !Ref LoadBalancerSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
#        - Key: access_logs.s3.enabled
#          Value: true
#        - Key: access_logs.s3.bucket
#          Value: affix-load-balancer-logs
      IpAddressType: ipv4
      Tags:
        - Key: Name
          Value: ECSClusterLoadBalancer

  # TODO Enable ALBListener HTTPS forwarding once you have a valid certificate
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      #SslPolicy: ELBSecurityPolicy-2016-08 # Default security policy.
      # More info here: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies
#      Certificates:
#        - CertificateArn: !Ref ECSClusterCertificate
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/html
            MessageBody: |
              <!DOCTYPE html>
              <html>
                <head>
                  <title>Page unrecognized</title>
                </head>
                <body">
                    <div>404</div>
                </body>
              </html>
            StatusCode: 404
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "*"
      ListenerArn: !Ref ALBListener
      Priority: 50000

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Target group to route traffic to the ECS cluster
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ECSClusterTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 5
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP

  # ECS cluster to manage the containers
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  # Auto Scaling group to launch and manage EC2 instances
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: !Ref MinInstances
      MaxSize: !Ref MaxInstances
      DesiredCapacity: 1
      LaunchConfigurationName: !Ref LaunchConfiguration
      VPCZoneIdentifier: !Ref PublicSubnetAZ1
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB # TODO: Ensure that ELB is properly configured
      CreationPolicy:
        ResourcesSignal:
          Count: 1
          Timeout: PT5M
      UpdatePolicy:
        AutoScalingRollingUpdate:
          MinInstanceInService: !Ref MinInstances
          MaxBatchSize: 1
          PauseTime: PT15M
          WaitOnResourceSignals: true
          MinSuccessfulInstancePercent: 75
          SuspendProcesses:
            - HealthCheck

  # Launch configuration to specify the EC2 instance configuration
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0849a313b038afda0 # TODO: Create a Lambda function that gets the latest Amazon Linux2 AMI ID
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref SecurityGroup
      IamInstanceProfile:
        Name: !Ref EC2InstanceProfile
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          echo Successfully 
          yum update -y
          amazon-linux-extras install docker
          service docker start
          usermod -a -G docker ec2-user
          chkconfig docker on
          su ec2-user
          docker login -u AWS -p $(aws ecr get-login --no-include-email)
          yum install -y amazon-ecs-agent
          echo Successfully ran UserData
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource AutosScalingGroup --region ${AWS::Region}

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole
    
  # IAM role to allow the EC2 instances to access other AWS resources
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
        -
          PolicyName: ecs-service
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - ecs:ListTasks
                  - ecs:UpdateContainerInstancesState
                  - ecs:DescribeContainerInstances
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:Submit*
                Resource: "*"

  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public

  RouteTablePublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  RouteTableAssociationPublicSubnetAZ1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetAZ1
      RouteTableId: !Ref RouteTablePublic
  RouteTableAssociationPublicSubnetAZ2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetAZ2
      RouteTableId: !Ref RouteTablePublic

Outputs:
  ECSCluster:
    Value: !Ref ECSCluster
    Export:
      Name: ECSCluster
  
  
  # This template creates a VPC, an Internet gateway, a security group, a subnet, an Application Load Balancer and an 
  # Application Load Balancer Listener and Rule.
  # It also creates an Auto Scaling group and launch configuration to launch and manage EC2 instances, and an ECS cluster to manage the containers.
  # The template also creates an IAM instance profile and role to grant the EC2 instances permissions to access other AWS resources.
  # This template includes the following AWS resources:
  #
  #    VPC
  #    Internet Gateway
  #    Subnet
  #    Security Group
  #    Application Load Balancer
  #    Auto Scaling Group
  #    Launch Configuration
  #    ECS Cluster
  #    IAM Instance Profile
  #    IAM Role
  #
  # Most of these resources are eligible for the AWS free tier, with the following exceptions:
  #
  #    Application Load Balancer: You are charged for the number of LoadBalancer Capacity Units (LCUs) used per month. Each LCU provides a certain amount of load balancing capacity. You can check the current pricing for LCUs on the AWS website.
  #
  #    Auto Scaling Group: You are charged for the number of EC2 instances launched, as well as for any other AWS resources used by the instances (e.g. Amazon EBS volumes). You can check the current pricing for EC2 instances on the AWS website.
  #
  # Please keep in mind that this template is just an example and you may incur additional charges depending on your specific usage patterns. You should carefully review the AWS pricing pages to understand the costs associated with each service and ensure that you are within the free tier limits.